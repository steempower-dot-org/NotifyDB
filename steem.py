import hashlib

def gen_block_id(block_number,block_data):
    """ Returns an autogenerated block ID - this must be globally unique even if the block number changes
        Note that block_data can not simply be hashed directly as order is not preserved
    """
    block_id_hash          = hashlib.sha256(block_number).digest()
    block_prev_hash        = hashlib.sha256(block_data['previous']).digest()
    block_merkle_root_hash = hashlib.sha256(block_data['transaction_merkle_root']).digest()
    block_witness_hash     = hashlib.sha256(block_data['witness']).digest()
    final_hash = hashlib.sha256(block_id_hash+block_prev_hash+block_merkle_root_hash+block_witness_hash).hexdigest()

def valid_block(block_data):
    """ Returns True if the block is valid, False otherwise
        This implementation doesn't attempt to cryptographically verify and just does a quick sanity check
    """
    if not block_data.has_key('previous'):          return False
    if not block_data.has_key('timestamp'):         return False
    if not block_data.has_key('witness'):           return False
    if not block_data.has_key('extensions'):        return False
    if not block_data.has_key('witness_signature'): return False
    if not block_data.has_key('transactions'):      return False
    return True

def get_interested_parties(block_data):
    """ Parses the block and finds any possible interested parties (on steem this also includes tags and permlinks)
        This is meant to be extremely rough and is here so further processing can take place in a threadpool
        Allows the original POST to return quickly
    """
    retval = set()
    for tx in block_data['transactions']:
        for op_id,op in tx['operations']:
            if op.has_key('permlink'):      retval.add(op['permlink'])
            if op.has_key('author'):        retval.add(op['author'])
            if op.has_key('voter'):         retval.add(op['voter'])
            if op.has_key('owner'):         retval.add(op['owner'])
            if op.has_key('category'):      retval.add(op['category'])
            if op.has_key('json_metadata'):
               json_metadata = json.loads(op['json_metadata'])
               if json_metadata.has_key('tags'):
                  for tag in json_metadata['tags']: retval.add(tag)
    return retval
